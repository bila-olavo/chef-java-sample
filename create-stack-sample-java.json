{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Glovo Java Sample Deploy AWS ",
    "Parameters": {
        "ProjectName": {
            "Description": "EC2 TAG Name",
            "Type": "String"
          },
          "KeyName": {
            "Description": "Key Name",
            "Type": "String"
          },
        "InstanceType": {
            "Description": "Instance Type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large"
            ]
        },  
        "VPCName": {
            "Description": "VPC Name",
            "Type": "String"
          },
        "VPCCIDR": {
            "Description": "VPC Name",
            "Type": "String"
        },
        "NameSub1": {
            "Description": "TAG Name Sub1",
            "Type": "String"
          },
          "NameSub2": {
            "Description": "TAG Name Sub2",
            "Type": "String"
          },
          "Sub1Zone": {
            "Description": "TAG Name Sub1",
            "Type": "String",
            "AllowedValues": [
                "sa-east-1a",
                "sa-east-1c",
                "us-east-1a",
                "us-east-1c"
              ]
          },
          "Sub2Zone": {
            "Description": "TAG Name Sub2",
            "Type": "String",
            "AllowedValues": [
                "sa-east-1a",
                "sa-east-1c",
                "us-east-1a",
                "us-east-1c"
              ]
          },
          "CIDRVPC": {
            "Description": "VPC CIDR BLOCK",
            "Type": "String"
          },
          "CIDRSub1": {
            "Description": "Subnet1 CIDR BLOCK",
            "Type": "String"
          },
          "CIDRSub2": {
            "Description": "Subnet2 CIDR BLOCK",
            "Type": "String"
        }        
    },
    "Mappings": {
        "RegionMap": {
          "sa-east-1": {
            "AMI": "ami-5339733f"
          },
          "us-east-1": {
            "AMI": "ami-0b33d91d"
          }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": {
                "Ref": "CIDRVPC"
              },
              "EnableDnsSupport": "true",
              "EnableDnsHostnames": "true",
              "InstanceTenancy": "default",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Ref": "VPCName"
                  }
                }
              ]
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "MapPublicIpOnLaunch": "true",
              "AvailabilityZone": {
                  "Ref": "Sub1Zone"
              },
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Ref": "CIDRSub1"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Ref": "NameSub1"
                  }
                }
              ]
            }
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": {
                  "Ref" : "Sub2Zone"
              },
              "MapPublicIpOnLaunch": "true",
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Ref": "CIDRSub2"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Ref": "NameSub2"
                  }
                }
              ]
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Scost",
                  "Value": {
                    "Ref": "TagScost"
                  }
                },
                {
                  "Key": "Name",
                  "Value": {
                    "Ref": "NameIGW"
                  }
                }
              ]
            }
        },
        "AttachIGW": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "IGW"
              }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Ref": "NameRouteTable"
                  }
                }
              ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachIGW",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "IGW"
              }
            }
        },
        "Subnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "Subnet1"
              },
              "RouteTableId": {
                "Ref": "RouteTable"
              }
            }
        },
        "Subnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "Subnet2"
              },
              "RouteTableId": {
                "Ref": "RouteTable"
              }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
        },
        "InboundAllowAllNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "NetworkAcl"
              },
              "RuleNumber": "100",
              "Protocol": "-1",
              "RuleAction": "allow",
              "Egress": "false",
              "CidrBlock": "0.0.0.0/0"
            }
        },
        "OutboundAllowAllNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "NetworkAcl"
              },
              "RuleNumber": "100",
              "Protocol": "-1",
              "RuleAction": "allow",
              "Egress": "true",
              "CidrBlock": "0.0.0.0/0"
            }
        },
        "Subnet1NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "Subnet1"
              },
              "NetworkAclId": {
                "Ref": "NetworkAcl"
              }
            }
        },
        "Subnet2NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "Subnet2"
              },
              "NetworkAclId": {
                "Ref": "NetworkAcl"
              }
            }
        },
        "SGDefault": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupDescription": "Default_Rules",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "-1",
                  "CidrIp": {
                    "Ref": "CIDRVPC"
                  },
                  "FromPort": "-1",
                  "ToPort": "-1"
                },
                {
                  "IpProtocol": "icmp",
                  "CidrIp": "0.0.0.0/0",
                  "FromPort": "-1",
                  "ToPort": "-1"
                }
              ]
            }
        },
        "SGHTTPEnabled": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },              
              "GroupDescription": "HTTP Enabled",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "80",
                  "ToPort": "80",
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
        },
        "SGHTTPSEnabled": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupDescription": "HTTPS Enabled",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "443",
                  "ToPort": "443",
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
        },
        "SGLB": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupDescription": "Load Balancer",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "80",
                  "ToPort": "80",
                  "CidrIp": "0.0.0.0/0"
                },
                {
                  "IpProtocol": "tcp",
                  "FromPort": "443",
                  "ToPort": "443",
                  "CidrIp": "0.0.0.0/0"
                },
                {
                  "IpProtocol": "icmp",
                  "CidrIp": "0.0.0.0/0",
                  "FromPort": "-1",
                  "ToPort": "-1"
                }
              ]
            }
        },
        "ELBJava": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
              "Subnets": [
                {
                  "Ref": "Subnet1"
                },
                {
                  "Ref": "Subnet2"
                }
              ],
              "Scheme": "internet-facing",
              "LoadBalancerName": {
                "Ref": "ProjectName"
              },
              "SecurityGroups": [
                {
                  "Ref": "SGLB"
                }
              ],
              "Listeners": [
                {
                  "LoadBalancerPort": "80",
                  "InstancePort": "8080",
                  "Protocol": "HTTP"
                }
              ],
              "HealthCheck": {
                "Target": "HTTP:8080/",
                "HealthyThreshold": "5",
                "UnhealthyThreshold": "10",
                "Interval": "20",
                "Timeout": "15"
              }
            }
          },
        "AutoScaling": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" :{
                "AutoScalingGroupName" :{"Ref": "ProjectName"},
                "AvailabilityZones" : [ 
                    {
                        "Ref": "Sub1Zone"
                    },
                    {
                        "Ref": "Sub2Zone"
                    }                 
                ],
                "Cooldown" : "300",
                "DesiredCapacity" : 2,
                "HealthCheckGracePeriod" : 300,
                "HealthCheckType" : "EC2",
                "LaunchConfigurationName" :{
                    "Ref": "LaunchConfig"
                },
                "LoadBalancerNames" : [{ "Ref": "ELBJava"} ],
                "MaxSize" : "10",
                "MinSize" : "2",
                "TerminationPolicies" : "OldestInstance",
                "VPCZoneIdentifier" : [{"Ref" :"VPC"} ]             
            }
        },
        "LauchConfig" :{
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "AssociatePublicIpAddress" : "false",
                "ImageId" : {
                    "Fn::FindInMap": [
                      "RegionMap",
                      {
                        "Ref": "AWS::Region"
                      },
                      "AMI"
                    ]
                  },
                "InstanceType" : {"Ref": "InstanceType" },
                "KeyName" : {"Ref": "KeyName"},
                "LaunchConfigurationName" : {"Ref":"ProjectName"},
                "SecurityGroups" : [ {"Ref": "SGDefault"} ],
                "UserData": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/bin/bash -ex\n",
                        "\n",
                        "chmod +x /root/install.sh\n",
                        "/root/install.sh",
                        ""
                      ]
                    ]
                  }
              }             }
        }
    }
}